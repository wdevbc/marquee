/*
 * marquee plugin 2.0v
 * This offers an alternative to the <marquee> tag, which doesn't align with HTML5 standards.
 * https://github.com/wdevbc/marquee
 *
 * copyright 2024 wdevbc
 *
 * Released under the MIT License
 *
 * Released on: June 17, 2024
 *
 */
((window, document) => { class SimpleMarquee { constructor(selector, options = {}) { this.selector = selector; this.options = Object.assign({}, SimpleMarquee.defaultOptions, options); this.parentElement = document.querySelector(selector); this.contentClone = this.parentElement.innerHTML; this.currentPosition = 0; this.isPlaying = false; this.animationFrameId = null; this.init(); } init() { this.setupStyles(); this.cloneContent(); this.setInitialPosition(); this.addMouseEvents(); if (this.options.autoplay) { this.start(); } } setupStyles() { this.parentElement.style.whiteSpace = 'nowrap'; this.parentElement.style.display = 'flex'; this.parentElement.style.position = 'relative'; this.parentElement.parentElement.style.overflow = 'hidden'; this.parentElement.parentElement.style.width = '100%'; } cloneContent() { const parentWidth = this.parentElement.parentElement.offsetWidth; const contentWidth = this.parentElement.scrollWidth; const numClones = Math.ceil(parentWidth / contentWidth) + 2; for (let i = 0; i < numClones; i++) { this.parentElement.innerHTML += this.contentClone; } } setInitialPosition() { if (this.options.direction === 'right') { this.currentPosition = -this.parentElement.scrollWidth / 2; } else { this.currentPosition = 0; } } addMouseEvents() { if (this.options.pauseOnMouseEnter) { this.parentElement.addEventListener('mouseenter', this.pause.bind(this)); this.parentElement.addEventListener('mouseleave', this.start.bind(this)); } } start() { if (!this.isPlaying) { this.isPlaying = true; this.animate(); } } pause() { this.isPlaying = false; if (this.animationFrameId) { cancelAnimationFrame(this.animationFrameId); this.animationFrameId = null; } } animate() { if (!this.isPlaying) return; if (this.options.direction === 'right') { this.currentPosition += this.options.speed; if (this.currentPosition >= 0) { this.currentPosition = -this.parentElement.scrollWidth / 2; } } else { this.currentPosition -= this.options.speed; if (this.currentPosition <= -this.parentElement.scrollWidth / 2) { this.currentPosition = 0; } } this.parentElement.style.transform = `translateX(${this.currentPosition}px)`; this.animationFrameId = requestAnimationFrame(this.animate.bind(this)); } } SimpleMarquee.defaultOptions = { speed: 1, autoplay: true, pauseOnMouseEnter: false, direction: 'left', }; window.SimpleMarquee = SimpleMarquee; })(window, document);
